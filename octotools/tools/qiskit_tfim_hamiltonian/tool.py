# octotools/tools/qiskit_tfim_hamiltonian/tool.py
from typing import Any, Dict, Optional, Union
from octotools.tools.base import BaseTool
from octotools.models.semantic import SemanticCodeFragment
from octotools.models.semantic_types import SemanticTypes

class Qiskit_TFIM_Hamiltonian_Tool(BaseTool):
    """
    TFIM哈密顿量代码生成工具 - 语义化版本
    生成包含hamiltonian定义的代码片段
    """
    
    require_llm_engine = False
    
    # 新增语义属性
    semantic_type = SemanticTypes.HAMILTONIAN
    dependencies = [SemanticTypes.SPEC]
    provides = ["hamiltonian"]

    def __init__(self):
        super().__init__(
            tool_name="Qiskit_TFIM_Hamiltonian_Tool",
            tool_description="Generate Qiskit TFIM Hamiltonian code from spec.",
            tool_version="2.0.0",
            input_types={
                "spec_fragment": 'SemanticCodeFragment - Spec fragment from previous tool',
                "spec_ir": 'dict - SpecIR (legacy compatibility)',
            },
            output_type='SemanticCodeFragment - hamiltonian definition code',
            demo_commands=[
                {
                    "command": 'tool.execute(spec_fragment=spec_fragment)',
                    "description": "Generate Hamiltonian code from spec fragment"
                }
            ],
            user_metadata={
                "routing": {
                    "task_type": "TFIM_VQE",
                    "backend": "qiskit",
                    "model": "TFIM",
                    "position": "intermediate",
                    "requires_llm_engine": False,
                    "consumes": [SemanticTypes.SPEC],
                    "produces": [SemanticTypes.HAMILTONIAN],
                    "next_tools": ["Qiskit_TFIM_Ansatz_Tool"]
                }
            }
        )

    def _extract_spec_ir(self, input_data: Union[SemanticCodeFragment, Dict[str, Any]]) -> Dict[str, Any]:
        """从输入中提取spec_ir数据"""
        if isinstance(input_data, SemanticCodeFragment):
            # 从语义片段的执行上下文中提取
            if input_data.execution_context and "spec_ir" in input_data.execution_context:
                return input_data.execution_context["spec_ir"]
            else:
                # 如果没有执行上下文，尝试执行代码片段
                context = {}
                exec(input_data.code, globals(), context)
                return context.get("spec_ir")
        elif isinstance(input_data, dict):
            # 向后兼容：直接是spec_ir字典
            return input_data
        else:
            raise ValueError("Invalid input: expected SemanticCodeFragment or dict")

    def _validate_spec_ir(self, spec_ir: Dict[str, Any]):
        """验证SpecIR格式和内容（保持原逻辑）"""
        required_fields = ["Model", "N", "Boundary", "Couplings"]
        missing_fields = [field for field in required_fields if field not in spec_ir]
        if missing_fields:
            raise ValueError(f"Missing required fields in SpecIR: {', '.join(missing_fields)}")
        
        if spec_ir["Model"] != "TFIM":
            raise ValueError("Only TFIM model is supported")
        
        if not isinstance(spec_ir["N"], int) or spec_ir["N"] < 2:
            raise ValueError("Invalid N: must be integer >= 2")

    def _generate_hamiltonian_code(self, N: int, J: float, h: float, boundary: str) -> str:
        """生成Qiskit哈密顿量代码（保持原逻辑，但生成完整可执行代码）"""
        
        # 根据边界条件确定逻辑
        if boundary == "PBC":
            zz_comment = "# ZZ interaction terms (periodic boundary)"
            zz_range = f"range({N})"
            next_i_expr = "(i + 1) % num_qubits"
        else:  # OBC
            zz_comment = "# ZZ interaction terms (open boundary)"
            zz_range = f"range({N - 1})"
            next_i_expr = "i + 1"
        
        code = f'''# Generated by Qiskit_TFIM_Hamiltonian_Tool
from qiskit.quantum_info import SparsePauliOp

def create_tfim_hamiltonian(num_qubits: int = {N}, J: float = {J}, h: float = {h}) -> SparsePauliOp:
    """
    Create TFIM Hamiltonian: H = -J Σ Z_i Z_{{i+1}} - h Σ X_i
    
    Parameters:
        num_qubits: Number of qubits
        J: ZZ coupling strength
        h: Transverse field strength
        
    Returns:
        SparsePauliOp: TFIM Hamiltonian
    """
    H_list = []
    
    {zz_comment}
    for i in {zz_range}:
        pauli_str = ['I'] * num_qubits
        pauli_str[i] = 'Z'
        pauli_str[{next_i_expr}] = 'Z'
        H_list.append((''.join(pauli_str), -J))
    
    # X transverse field terms
    for i in range(num_qubits):
        pauli_str = ['I'] * num_qubits
        pauli_str[i] = 'X'
        H_list.append((''.join(pauli_str), -h))
    
    return SparsePauliOp.from_list(H_list)

# Create the Hamiltonian with specified parameters
hamiltonian = create_tfim_hamiltonian({N}, {J}, {h})
print(f"TFIM Hamiltonian created: {{hamiltonian.num_qubits}} qubits, {{len(hamiltonian)}} terms")
'''
        return code

    def execute(
        self,
        spec_fragment: Optional[SemanticCodeFragment] = None,
        spec_ir: Optional[Dict[str, Any]] = None  # 向后兼容
    ) -> SemanticCodeFragment:
        """
        生成Qiskit TFIM哈密顿量代码
        
        Args:
            spec_fragment: 来自Spec工具的语义片段
            spec_ir: SpecIR字典（向后兼容）
            
        Returns:
            SemanticCodeFragment: 包含hamiltonian定义的代码片段
        """
        
        # 确定输入源
        if spec_fragment is not None:
            input_data = spec_fragment
        elif spec_ir is not None:
            input_data = spec_ir
        else:
            raise ValueError("Either spec_fragment or spec_ir must be provided")
        
        # 提取spec_ir数据
        spec_ir_data = self._extract_spec_ir(input_data)
        
        # 验证输入（保持原逻辑）
        self._validate_spec_ir(spec_ir_data)
        
        # 提取参数（保持原逻辑）
        N = spec_ir_data["N"]
        boundary = spec_ir_data["Boundary"]  # "OBC" 或 "PBC"
        couplings = spec_ir_data["Couplings"]
        J = float(couplings["J"])
        h = float(couplings["h"])
        
        # 生成哈密顿量代码
        code = self._generate_hamiltonian_code(N, J, h, boundary)
        
        # 返回语义片段
        return self.create_semantic_fragment(
            code=code,
            variable_name="hamiltonian",
            metadata={
                "backend": "qiskit",
                "model": "TFIM",
                "parameters": {"N": N, "J": J, "h": h, "boundary": boundary}
            }
        )