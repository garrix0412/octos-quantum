# octotools/tools/qiskit_tfim_hamiltonian/tool.py

from typing import Any, Dict, Optional

from octotools.tools.base import BaseTool

class Qiskit_TFIM_Hamiltonian_Tool(BaseTool):
    """
    TFIM哈密顿量代码生成工具
    将SpecIR转换为Qiskit哈密顿量代码
    """
    
    require_llm_engine = False

    def __init__(self):
        super().__init__(
            tool_name="Qiskit_TFIM_Hamiltonian_Tool",
            tool_description="Generate Qiskit TFIM Hamiltonian code from normalized SpecIR.",
            tool_version="1.1.0",
            input_types={
                "spec_ir": 'dict - SpecIR from Qiskit_TFIM_Spec_Tool',
                "include_object": "bool - Whether to return Hamiltonian object (default: False)"
            },
            output_type='dict - {"hamiltonian": SparsePauliOp?, "Code": str, "metadata": {...}}',
            demo_commands=[
                {
                    "command": 'tool.execute(spec_ir=spec_ir)',
                    "description": "Generate Qiskit TFIM Hamiltonian code from SpecIR"
                },
                {
                    "command": 'tool.execute(spec_ir=spec_ir, include_object=True)',
                    "description": "Generate code and return actual Hamiltonian object"
                }
            ],
            user_metadata={
                "routing": {
                    "task_type": "TFIM_VQE",
                    "backend": "qiskit",
                    "model": "TFIM",
                    "position": "intermediate",
                    "requires_llm_engine": False,
                    "consumes": ["spec_ir"],
                    "produces": ["hamiltonian"],
                    "next_tools": ["Qiskit_TFIM_Ansatz_Tool"]
                },
                "inputs": {
                    "required_fields": ["spec_ir"],
                    "optional_fields": ["include_object"],
                    "defaults": {"include_object": False}
                },
                "outputs": {
                    "output_type": "dict",
                    "standard_variable": "hamiltonian"
                }
            }
        )

    def get_metadata(self):
        """获取工具元数据"""
        metadata = super().get_metadata()
        return metadata

    def _validate_spec_ir(self, spec_ir: Dict[str, Any]):
        """验证SpecIR格式和内容"""
        required_fields = ["Model", "N", "Boundary", "Couplings"]
        missing_fields = [field for field in required_fields if field not in spec_ir]
        if missing_fields:
            raise ValueError(f"Missing required fields in SpecIR: {', '.join(missing_fields)}")
        
        if spec_ir["Model"] != "TFIM":
            raise ValueError("Only TFIM model is supported")
        
        if not isinstance(spec_ir["N"], int) or spec_ir["N"] < 2:
            raise ValueError("Invalid N: must be integer >= 2")

    def _generate_hamiltonian_code(self, N: int, J: float, h: float, boundary: str) -> str:
        """生成Qiskit哈密顿量创建代码"""
        
        # 根据边界条件确定逻辑
        if boundary == "PBC":
            zz_comment = "# ZZ interaction terms (periodic boundary)"
            zz_range = f"range({N})"
            next_i_expr = "(i + 1) % num_qubits"
        else:  # OBC
            zz_comment = "# ZZ interaction terms (open boundary)"
            zz_range = f"range({N - 1})"
            next_i_expr = "i + 1"
        
        code = f'''# Generated by Qiskit_TFIM_Hamiltonian_Tool
from qiskit.quantum_info import SparsePauliOp

def create_tfim_hamiltonian(num_qubits: int = {N}, J: float = {J}, h: float = {h}) -> SparsePauliOp:
    """
    Create TFIM Hamiltonian: H = -J Σ Z_i Z_{{i+1}} - h Σ X_i
    
    Parameters:
        num_qubits: Number of qubits
        J: ZZ coupling strength
        h: Transverse field strength
        
    Returns:
        SparsePauliOp: TFIM Hamiltonian
    """
    H_list = []
    
    {zz_comment}
    for i in {zz_range}:
        pauli_str = ['I'] * num_qubits
        pauli_str[i] = 'Z'
        pauli_str[{next_i_expr}] = 'Z'
        H_list.append((''.join(pauli_str), -J))
    
    # X transverse field terms
    for i in range(num_qubits):
        pauli_str = ['I'] * num_qubits
        pauli_str[i] = 'X'
        H_list.append((''.join(pauli_str), -h))
    
    return SparsePauliOp.from_list(H_list)

# Create the Hamiltonian with specified parameters - 使用标准变量名
hamiltonian = create_tfim_hamiltonian({N}, {J}, {h})
'''
        return code

    def _create_tfim_hamiltonian(self, N: int, J: float, h: float, boundary: str):
        """创建实际的TFIM哈密顿量对象（当include_object=True时使用）"""
        try:
            from qiskit.quantum_info import SparsePauliOp
        except ImportError:
            raise ImportError("Qiskit is required to create Hamiltonian object")
        
        H_list = []
        
        # ZZ相互作用项
        if boundary == "PBC":
            # 周期边界条件
            for i in range(N):
                pauli_str = ['I'] * N
                pauli_str[i] = 'Z'
                pauli_str[(i + 1) % N] = 'Z'
                H_list.append((''.join(pauli_str), -J))
        else:
            # 开放边界条件
            for i in range(N - 1):
                pauli_str = ['I'] * N
                pauli_str[i] = 'Z'
                pauli_str[i + 1] = 'Z'
                H_list.append((''.join(pauli_str), -J))
        
        # X横向场项
        for i in range(N):
            pauli_str = ['I'] * N
            pauli_str[i] = 'X'
            H_list.append((''.join(pauli_str), -h))
        
        return SparsePauliOp.from_list(H_list)

    def execute(
        self,
        spec_ir: Dict[str, Any],
        include_object: bool = False
    ) -> Dict[str, Any]:
        """
        生成Qiskit TFIM哈密顿量代码
        
        Args:
            spec_ir: SpecIR字典
            include_object: 是否返回实际的SparsePauliOp对象
            
        Returns:
            dict: 生成的代码和可选的哈密顿量对象
        """
        
        # 验证输入
        if not isinstance(spec_ir, dict):
            raise ValueError("spec_ir must be a dictionary")
            
        self._validate_spec_ir(spec_ir)
        
        # 提取参数
        N = spec_ir["N"]
        boundary = spec_ir["Boundary"]  # "OBC" 或 "PBC"
        couplings = spec_ir["Couplings"]
        J = float(couplings["J"])
        h = float(couplings["h"])
        
        # 生成哈密顿量代码
        code = self._generate_hamiltonian_code(N, J, h, boundary)
        
        result = {
            "Code": code,
            "metadata": {
                "backend": "qiskit",
                "model": "TFIM",
                "parameters": {"N": N, "J": J, "h": h, "boundary": boundary}
            }
        }
        
        # 可选：包含实际的哈密顿量对象
        if include_object:
            try:
                hamiltonian_obj = self._create_tfim_hamiltonian(N, J, h, boundary)
                result["hamiltonian"] = hamiltonian_obj  # 使用标准变量名
            except ImportError:
                # 如果无法导入Qiskit，不返回对象但继续执行
                pass
        
        return result
